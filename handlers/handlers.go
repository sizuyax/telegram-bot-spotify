package handlers

import (
	"fmt"
	"github.com/sirupsen/logrus"
	tb "gopkg.in/tucnak/telebot.v2"
	"telegram-bot-spotify/repository"
	"time"
)

var (
	menu     = &tb.ReplyMarkup{ResizeReplyKeyboard: true}
	selector = &tb.ReplyMarkup{}

	btnSearch       = menu.Text("üîç –ù–∞–π—Ç–∏ —Å–µ–º—å—é")
	btnBlock        = menu.Text("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	btnUnblock      = menu.Text("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	btnCheckBlocked = menu.Text("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	btnUnblockAll   = menu.Text("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö")
	btnReport       = menu.Text("üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
)

const ModeHTML = tb.ModeHTML

var result *tb.Message

func AllHandlers(b *tb.Bot) {
	menu.Reply(
		menu.Row(btnSearch, btnReport),
		menu.Row(btnBlock, btnUnblock),
		menu.Row(btnUnblockAll, btnCheckBlocked),
	)

	selector.Reply(
		selector.Row(btnSearch, btnReport),
		selector.Row(btnBlock, btnUnblock),
		selector.Row(btnUnblockAll, btnCheckBlocked),
	)

	buttonHandlers(b)
	commandHandlers(b)
}

func buttonHandlers(b *tb.Bot) {

	b.Handle(&btnSearch, func(m *tb.Message) {
		id := m.Sender.ID
		username := m.Sender.Username
	search:
		users, err := repository.GetProfiles()
		if err != nil {
			logrus.Error(err)
		}

		ok, err := repository.IsProfileExist(id)
		if err != nil {
			logrus.Error(err)
		}
		if ok {
			if len(users) <= 1 {
				b.Send(m.Sender, "–¢—ã –æ–¥–∏–Ω –≤ <b>–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b> :(", ModeHTML)
				b.Send(m.Sender, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /search", ModeHTML)
				return
			}

			replyMarkup := b.NewMarkup()

			for _, profile := range users {

				isReported, err := repository.IsProfileBlocked(profile)
				if err != nil {
					logrus.Error(err)
				}

				if len(replyMarkup.InlineKeyboard) >= 5 {
					break
				} else if profile == username {
					continue
				} else if isReported {
					continue
				}

				url := fmt.Sprintf("https://t.me/%s", profile)
				btn := tb.InlineButton{Unique: profile, Text: profile, URL: url}

				replyMarkup.InlineKeyboard = append(replyMarkup.InlineKeyboard, []tb.InlineButton{btn})
			}

			findFamily, _ := b.Send(m.Sender, "–ú—ã –Ω–∞–π–¥–µ–º —Ç–≤–æ—é –Ω–æ–≤—É—é —Å–µ–º—å—é —á–µ—Ä–µ–∑: ", ModeHTML)

			three, _ := b.Send(m.Sender, "3", ModeHTML)
			time.Sleep(1 * time.Second)

			two, _ := b.Edit(three, "2", ModeHTML)
			time.Sleep(1 * time.Second)

			one, _ := b.Edit(two, "1", ModeHTML)
			time.Sleep(1 * time.Second)
			b.Delete(findFamily)
			b.Delete(one)

			b.Send(m.Sender, "–í–æ—Ç —Ç–≤–æ—è –Ω–æ–≤–∞—è —Å–µ–º—å—è:", ModeHTML, &tb.SendOptions{ReplyMarkup: replyMarkup})
		} else {
			notInBD, _ := b.Send(m.Sender, "–¢—ã –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", ModeHTML)

			time.Sleep(2 * time.Second)
			b.Delete(notInBD)

			process, _ := b.Edit(notInBD, "–°–µ–π—á–∞—Å –∑–∞–Ω–µ—Å–µ–º —Ç–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", ModeHTML)

			if err = repository.AddProfileToDB(id, username); err != nil {
				logrus.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É")
				return
			}

			time.Sleep(2 * time.Second)

			b.Delete(process)

			b.Send(m.Sender, "–¢–µ–±—è –∑–∞–Ω–µ—Å–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
			goto search
		}
	})

	b.Handle(&btnBlock, func(m *tb.Message) {
		users, _ := repository.GetProfiles()

		b.Send(m.Sender, "–ù–∞–ø–∏—à–∏ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", ModeHTML)

		b.Handle(tb.OnText, func(m *tb.Message) {
			block, err := repository.IsProfileBlocked(m.Text)
			if err != nil {
				logrus.Error(err)
			}

			if block {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ModeHTML)
				return
			}

			found := false

			for _, user := range users {
				if m.Text == user {
					found = true
					if err = repository.BlockProfile(m.Sender.Username, m.Text); err != nil {
						logrus.Error(err)
					}

					b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ", ModeHTML)
					b.Send(m.Sender, "–ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—à–∏ /unblock", ModeHTML)
					break
				}
			}

			if !found {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", ModeHTML)
			}
		})
	})

	b.Handle(&btnUnblock, func(m *tb.Message) {
		users, _ := repository.GetProfiles()

		b.Send(m.Sender, "–ù–∞–ø–∏—à–∏ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", ModeHTML)

		b.Handle(tb.OnText, func(m *tb.Message) {
			unblock, err := repository.IsProfileBlocked(m.Text)
			if err != nil {
				logrus.Error(err)
			}

			if !unblock {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ModeHTML)
				return
			}

			found := false

			for _, user := range users {
				if m.Text == user {
					found = true
					if err = repository.UnBlockProfile(m.Text); err != nil {
						logrus.Error(err)
					}

					b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ", ModeHTML)
					break
				}
			}

			if !found {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", ModeHTML)
			}

		})
	})

	b.Handle(&btnCheckBlocked, func(m *tb.Message) {
		users, err := repository.GetBlockedProfiles()
		if err != nil {
			logrus.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
			return
		}

		if users == nil {
			b.Send(m.Sender, "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
			return
		}

		b.Send(m.Sender, "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ModeHTML)

		for _, user := range users {
			b.Send(m.Sender, "<b>"+user+"</b>", ModeHTML)
		}
	})

	b.Handle(&btnUnblockAll, func(m *tb.Message) {
		users, err := repository.GetBlockedProfiles()
		if err != nil {
			logrus.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
			return
		}

		if users == nil {
			b.Send(m.Sender, "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
			return
		}

		for _, user := range users {
			err = repository.UnBlockProfile(user)
			if err != nil {
				return
			}
		}

		b.Send(m.Sender, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", ModeHTML)
	})

	b.Handle(&btnReport, func(m *tb.Message) {
		users, _ := repository.GetProfiles()

		b.Send(m.Sender, "–ù–∞–ø–∏—à–∏ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è:", ModeHTML)

		b.Handle(tb.OnText, func(m *tb.Message) {
			found := false

			for _, user := range users {
				if m.Text == user {
					found = true
				}
			}
			if !found {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", ModeHTML)
				return
			}

			username := m.Text

			b.Send(m.Sender, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:", ModeHTML)

			b.Handle(tb.OnText, func(m *tb.Message) {

				reportMessage := fmt.Sprintln(m.Text)

				b.Send(&tb.User{ID: 602974315}, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Sender.Username+"</b> –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>"+username+"</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <b>"+reportMessage+"</b>", ModeHTML)

				b.Send(m.Sender, "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ModeHTML)
			})
		})
	})
}

func commandHandlers(b *tb.Bot) {

	b.Handle("/start", func(m *tb.Message) {
		reply := b.NewMarkup()
		reply.Inline(
			reply.Row(
				reply.Data("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "button_clicked"),
			),
		)

		p := &tb.Photo{File: tb.FromDisk("./bot/img/spotify.png")}
		b.Send(m.Sender, p)
		b.Send(m.Sender, "–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ª—é–¥–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ <b>Spotify!</b>", &tb.SendOptions{ReplyMarkup: menu}, ModeHTML)
		result, _ = b.Send(m.Sender, "<i>–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ–º—å—é –Ω–∞–∂–º–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!</i>", &tb.SendOptions{ReplyMarkup: reply}, ModeHTML)
	})

	b.Handle(&tb.InlineButton{Unique: "button_clicked"}, func(c *tb.Callback) {
		id := c.Sender.ID
		username := c.Sender.Username

		if username == "" {
			b.Send(c.Sender, "–£ —Ç–µ–±—è –Ω–µ—Ç <b>username</b> –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, –ø–æ—ç—Ç–æ–º—É —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –±—ã—Ç—å –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", ModeHTML)
			return
		}

		b.Delete(result)

		users, _ := repository.GetProfiles()

		ok, err := repository.IsProfileExist(id)
		if err != nil {
			logrus.Error(err)
		}
		if ok {
			b.Send(c.Sender, "–¢—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏–ª —Å–≤–æ—é —Å–µ–º—å—é —Ä–∞–Ω–µ–µ :)", ModeHTML)
			b.Send(c.Sender, "–ò –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /search —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫ <b>—Å–µ–º—å–∏ –≤ Spotify</b>!", ModeHTML)
		}

		if err = repository.AddProfileToDB(id, username); err != nil {
			logrus.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É")
			return
		}

		if len(users) <= 1 {
			b.Send(c.Sender, "–¢—ã –æ–¥–∏–Ω –≤ <b>–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b> :(", ModeHTML)
			b.Send(c.Sender, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /search", ModeHTML)
			return
		}

		profiles, err := repository.GetProfiles()
		if err != nil {
			logrus.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É")
			return
		}
		b.Send(c.Sender, "–¢–µ–±—è –∑–∞–Ω–µ—Å–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

		wait, _ := b.Send(c.Sender, "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –º—ã –ø–æ—á—Ç–∏ –Ω–∞—à–ª–∏ —Ç–≤–æ—é —Å–µ–º—å—é!", ModeHTML)

		time.Sleep(2 * time.Second)

		replyMarkup := b.NewMarkup()

		for _, profile := range profiles {
			if len(profiles) > 5 {
				break
			}
			if profile == username {
				continue
			}

			url := fmt.Sprintf("https://t.me/%s", profile)
			btn := tb.InlineButton{Unique: profile, Text: profile, URL: url}

			replyMarkup.InlineKeyboard = append(replyMarkup.InlineKeyboard, []tb.InlineButton{btn})
		}
		b.Delete(wait)

		b.Send(c.Sender, "–í–æ—Ç —Ç–≤–æ—è –Ω–æ–≤–∞—è —Å–µ–º—å—è:", ModeHTML, &tb.SendOptions{ReplyMarkup: replyMarkup})
	})

	b.Handle("/search", func(m *tb.Message) {
		id := m.Sender.ID
		username := m.Sender.Username
	search:
		users, err := repository.GetProfiles()
		if err != nil {
			logrus.Error(err)
		}

		ok, err := repository.IsProfileExist(id)
		if err != nil {
			logrus.Error(err)
		}
		if ok {
			if len(users) <= 1 {
				b.Send(m.Sender, "–¢—ã –æ–¥–∏–Ω –≤ <b>–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b> :(", ModeHTML)
				b.Send(m.Sender, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /search", ModeHTML)
				return
			}

			replyMarkup := b.NewMarkup()

			for _, profile := range users {

				isReported, err := repository.IsProfileBlocked(profile)
				if err != nil {
					logrus.Error(err)
				}

				if len(replyMarkup.InlineKeyboard) >= 5 {
					break
				} else if profile == username {
					continue
				} else if isReported {
					continue
				}

				url := fmt.Sprintf("https://t.me/%s", profile)
				btn := tb.InlineButton{Unique: profile, Text: profile, URL: url}

				replyMarkup.InlineKeyboard = append(replyMarkup.InlineKeyboard, []tb.InlineButton{btn})
			}

			findFamily, _ := b.Send(m.Sender, "–ú—ã –Ω–∞–π–¥–µ–º —Ç–≤–æ—é –Ω–æ–≤—É—é —Å–µ–º—å—é —á–µ—Ä–µ–∑: ", ModeHTML)

			three, _ := b.Send(m.Sender, "3", ModeHTML)
			time.Sleep(1 * time.Second)

			two, _ := b.Edit(three, "2", ModeHTML)
			time.Sleep(1 * time.Second)

			one, _ := b.Edit(two, "1", ModeHTML)
			time.Sleep(1 * time.Second)
			b.Delete(findFamily)
			b.Delete(one)

			b.Send(m.Sender, "–í–æ—Ç —Ç–≤–æ—è –Ω–æ–≤–∞—è —Å–µ–º—å—è:", ModeHTML, &tb.SendOptions{ReplyMarkup: replyMarkup})
		} else {
			notInBD, _ := b.Send(m.Sender, "–¢—ã –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", ModeHTML)

			time.Sleep(2 * time.Second)
			b.Delete(notInBD)

			process, _ := b.Send(m.Sender, "–°–µ–π—á–∞—Å –∑–∞–Ω–µ—Å–µ–º —Ç–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", ModeHTML)

			if err = repository.AddProfileToDB(id, username); err != nil {
				logrus.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É")
				return
			}

			time.Sleep(2 * time.Second)

			b.Delete(process)

			b.Send(m.Sender, "–¢–µ–±—è –∑–∞–Ω–µ—Å–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
			goto search
		}
	})

	b.Handle("/block", func(m *tb.Message) {
		users, _ := repository.GetProfiles()

		b.Send(m.Sender, "–ù–∞–ø–∏—à–∏ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", ModeHTML)

		b.Handle(tb.OnText, func(m *tb.Message) {
			block, err := repository.IsProfileBlocked(m.Text)
			if err != nil {
				logrus.Error(err)
			}

			if block {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ModeHTML)
				return
			}

			found := false

			for _, user := range users {
				if m.Text == user {
					found = true
					if err = repository.BlockProfile(m.Sender.Username, m.Text); err != nil {
						logrus.Error(err)
					}

					b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ", ModeHTML)
					b.Send(m.Sender, "–ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—à–∏ /unblock", ModeHTML)
					break
				}
			}

			if !found {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", ModeHTML)
			}
		})
	})

	b.Handle("/unblock", func(m *tb.Message) {
		users, _ := repository.GetProfiles()

		b.Send(m.Sender, "–ù–∞–ø–∏—à–∏ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", ModeHTML)

		b.Handle(tb.OnText, func(m *tb.Message) {
			unblock, err := repository.IsProfileBlocked(m.Text)
			if err != nil {
				logrus.Error(err)
			}

			if !unblock {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ModeHTML)
				return
			}

			found := false

			for _, user := range users {
				if m.Text == user {
					found = true
					if err = repository.UnBlockProfile(m.Text); err != nil {
						logrus.Error(err)
					}

					b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ", ModeHTML)
					break
				}
			}

			if !found {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", ModeHTML)
			}

		})
	})

	b.Handle("/checkblocked", func(m *tb.Message) {
		users, err := repository.GetBlockedProfiles()
		if err != nil {
			logrus.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
			return
		}

		if users == nil {
			b.Send(m.Sender, "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
			return
		}

		b.Send(m.Sender, "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ModeHTML)

		for _, user := range users {
			b.Send(m.Sender, "<b>"+user+"</b>", ModeHTML)
		}
	})

	b.Handle("/unblockall", func(m *tb.Message) {
		users, err := repository.GetBlockedProfiles()
		if err != nil {
			logrus.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
			return
		}

		if users == nil {
			b.Send(m.Sender, "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
			return
		}

		for _, user := range users {
			err = repository.UnBlockProfile(user)
			if err != nil {
				return
			}
		}

		b.Send(m.Sender, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", ModeHTML)
	})

	b.Handle("/report", func(m *tb.Message) {
		users, _ := repository.GetProfiles()

		b.Send(m.Sender, "–ù–∞–ø–∏—à–∏ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è:", ModeHTML)

		b.Handle(tb.OnText, func(m *tb.Message) {
			found := false

			for _, user := range users {
				if m.Text == user {
					found = true
				}
			}
			if !found {
				b.Send(m.Sender, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Text+"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω", ModeHTML)
				return
			}

			username := m.Text

			b.Send(m.Sender, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:", ModeHTML)

			b.Handle(tb.OnText, func(m *tb.Message) {

				reportMessage := fmt.Sprintln(m.Text)

				b.Send(&tb.User{ID: 602974315}, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>"+m.Sender.Username+"</b> –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>"+username+"</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <b>"+reportMessage+"</b>", ModeHTML)

				b.Send(m.Sender, "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ModeHTML)
			})
		})
	})
}
